#!/usr/bin/env python3
import argparse

class virtual_memory_sim():
    '''

    Virtual memory simulator
    Run through the memory references of the trace file
    Decide the action taken for each address 
        * memory hit
        * page fault with no eviction
        * page fault and evict clean page
        * page fault and evict dirty page
        
    After dealing with all the memory references for both simulated processes
    print out summary statistics in the following format

    '''
    def __init__(self):
        self.parser = argparse.ArgumentParser()
        self.algorithm = 'opt'
        self.frames = 8
        self.pageSize = 8
        self.memorySplit = '1:2'
        self.tracefilePath = ''

    def parse_args(self):
        self.parser.add_argument('-a', '--algorithm',     type=str, choices = ['opt', 'lru'])
        self.parser.add_argument('-n', '--numFrames',  type=int)
        self.parser.add_argument('-p', '--pageSize',   type=int)
        self.parser.add_argument('-s', '--memorySplit',type=str)
        self.parser.add_argument('tracefile', type=str)
        contents = self.parser.parse_args()
        if (contents.algorithm == 'lru' or contents.algorithm == 'opt' ):
            self.algorithm = contents.algorithm
        if (contents.numFrames != 0):
            self.numFrames = contents.numFrames
        if (contents.pageSize != 0):
            self.pageSize = contents.pageSize
        if (contents.memorySplit != ''):
            self.memorySplit = contents.memorySplit
        if (contents.tracefile != ''):
            self.tracefile = contents.tracefile

    def apply_split(self):
        '''
            Apply the memory split between the two processes.
                'a:b' --> where a and b are positive integers > 0 that represent the ratios of each process's memory allocation. 
                1:2 split means that the second process gets twice as many frames as the first process (i.e., the first process gets one third and the second two thirds). 
                The sum of a and b evenly divided the total number of frames.

            then initialize two objects to track each process.
        '''
    
    def run_sim(self):
        file = open(self.tracefile)
        for i, line in enumerate(file):
            if (i>10):
                break

            print(line)


class lru_sim():
    '''

    '''
    def __init__(self, frames):
        self.frames = frames
        self.entries = []
    


if __name__ == "__main__":
    vm_sim = virtual_memory_sim()
    vm_sim.parse_args()
    vm_sim.run_sim()